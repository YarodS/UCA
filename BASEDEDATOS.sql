-- DATABASE 
CREATE DATABASE ITSAUCA200;
-- END

-- TABLA DE DE POSICIONES
CREATE TABLE POSICION(
POSICION_COD NVARCHAR(45) PRIMARY KEY IDENTITY NOT NULL,
NAVE_COD VARCHAR(15) NOT NULL,
LARGO NUMERIC(10,3) NULL,
ALTO NUMERIC(10,3) NULL,
ANCHO NUMERIC(10,3) NULL,
POS_VACIA NVARCHAR(1) NOT NULL,
UNIDAD_VOLUMEN NVARCHAR(5) NULL
);
--END

-- TABLE DE CLIENTES DE DEPOT
CREATE TABLE CLIENTEDEPOT(
CLIENTE_ID VARCHAR(25) NOT NULL,
NOMBRE VARCHAR(60) NULL,
NRO_DOCUMENTO VARCHAR(20) NULL,
RAZON_SOCIAL VARCHAR(80) NULL,
OBSERVACIONES VARCHAR(200)NULL,
ESTADO INT NOT NULL
)
-- END

-- TABLA DE TIPO DE POSICIONES
/* ESTA TABLA DEBE CONTENER LOS TIPOS DE POSICION CON LOS QUE CUENTA EL DEPOT

EJEM TIPO POS RACK:  1,STANDARD,RACK,1,1
EJEM TIPO POS PISO:  36,PISO,PISO_M2,0,1

EL ORDER_ASC DE LOS TIPO PISO DEBE SER 0,
DE LOS RACK DEBE SER EN SECUENCIA: 1,2,3,4,5,6,7..
*/
CREATE TABLE TIPO_POSICION(
TIPO_POSICION_ID INT PRIMARY KEY IDENTITY NOT NULL,
TIPO_POSICION_COD VARCHAR(50) NOT NULL,
LAY_OUT VARCHAR(50) NULL,
ORDER_ASC INT NULL,
ESTADO INT NOT NULL
);
--END

-- TABLA DE POSICIONES CON CLIENTES
CREATE TABLE RL_DET_DOC_TRANS_POSICION_DIM (
POSICION_COD NVARCHAR(45) NULL,
CLIENTE_ID NVARCHAR(15) NULL
)
--END

-- TABLA DE POSICIONES CON SU TIPO Y ESTADO
/*ESTA TABLA SE DEBE LLENAR LA POSICION CON SU TIPO CORRESPONDIENTE*/
CREATE TABLE RL_POSICION_TIPO(
POSICION_COD VARCHAR(45) PRIMARY KEY NOT NULL,
TIPO_POSICION NVARCHAR(30) NULL,
F_REGISTRO DATETIME NOT NULL,
ESTADO SMALLINT NOT NULL
);
-- END

-- TABLE DE NAVES DEPOT
CREATE TABLE DEPOT_NAVES(
NAVE_ID INT PRIMARY KEY NOT NULL,
EMPLAZAMIENTO_ID INT NOT NULL,
DEPOSITO_ID VARCHAR(15) NOT NULL,
NAVE_COD VARCHAR(30) NOT NULL,
DESCRIPCION VARCHAR(50) NOT NULL,
NAVE_UNID_ASOCIADA NUMERIC(20,0) NULL,
NAVE_DE_UNIDADES VARCHAR(1) NULL,
NAVE_TIENE_LAYOUT VARCHAR(1) NULL,
PRE_INGRESO VARCHAR(1) NULL,
DISP_LOCATOR NUMERIC(20,0) NULL,
PRE_EGRESO VARCHAR(1) NULL,
DISP_INGRESO VARCHAR(1) NULL,
DISP_EGRESO VARCHAR(1) NULL,
DISP_TRANSF VARCHAR(1) NULL,
PICKING VARCHAR(1) NULL,
ORDEN_LOCATOR NUMERIC(6,0) NULL,
intermedia VARCHAR(1) NULL,
DEPOSITO_EXTERNO_ID VARCHAR(15) NULL,
C_MOSTRADOR CHAR(1) NULL,
FLG_GARANTIA VARCHAR(1) NULL,
EN_ERROR VARCHAR(1) NULL,
ZONA_PREPARACION VARCHAR(1) NULL,
GUARDADO_RAPIDO VARCHAR(1) NULL,
FLG_CANCELACION_PEDIDOS VARCHAR(1) NULL,
NAVE_REFERENCIA VARCHAR(100) NULL
);
-- END

-- CREATE VIEW View_mts2
CREATE VIEW View_mts2 AS 
SELECT TOP (100) PERCENT 
t1.POSICION_COD, 
t2.TIPO_POSICION, 
t1.NAVE_COD, 
t1.LARGO, 
t1.ANCHO,
ROUND(t1.LARGO * t1.ANCHO / 10000, 0) AS MT, t1.POS_VACIA,
t2.ESTADO,
t3.CLIENTE_ID
FROM dbo.POSICION AS t1 WITH (nolock) 
INNER JOIN dbo.RL_POSICION_TIPO AS t2 WITH (nolock) ON t1.POSICION_COD = t2.POSICION_COD 
INNER JOIN dbo.TIPO_POSICION AS t4 WITH (nolock) ON t2.TIPO_POSICION = t4.TIPO_POSICION_COD 
LEFT OUTER JOIN dbo.RL_DET_DOC_TRANS_POSICION_DIM AS t3 WITH (nolock) ON t1.POSICION_COD = t3.POSICION_COD
WHERE (t4.LAY_OUT = 'PISO_M2')
GROUP BY t1.POSICION_COD, t2.TIPO_POSICION, t1.NAVE_COD, t1.LARGO, t1.ANCHO, t1.POS_VACIA, t2.ESTADO, t3.CLIENTE_ID
ORDER BY t1.POSICION_COD
-- END VIEW

-- CREATE SP uca_sp_get_mts2
ALTER PROCEDURE [dbo].[uca_sp_get_mts2]
AS
BEGIN
select
m2.LAY_OUT AS MT2_TYPE_POSITION,
CONVERT(decimal(10), ROUND(sum(m2.mt), 2)) MT2_TOTAL, 
CONVERT(decimal(10), ROUND(sum(m2.mt_u), 2)) MT2_OCUPADAS,
CONVERT(decimal(10), ROUND(SUM(m2.mt) - SUM(m2.mt_u), 2)) MT2_LIBRES,
CONVERT(decimal(10), isnull ((SELECT SUM(MT) FROM View_mts2  WHERE NAVE_COD = 'A' AND POS_VACIA = 1 AND ESTADO = 1), 0)) AS MT2_VAC_A,
CONVERT(decimal(10), isnull ((SELECT SUM(MT) FROM View_mts2  WHERE NAVE_COD = 'B' AND POS_VACIA = 1 AND ESTADO = 1), 0)) AS MT2_VAC_B,
CONVERT(decimal(10), isnull ((SELECT SUM(MT) FROM View_mts2  WHERE NAVE_COD = 'C' AND POS_VACIA = 1 AND ESTADO = 1), 0)) AS MT2_VAC_C,
-- AGREGAR LAS DEMAS POSICICIONES , MT2_VAC_D, MT2_VAC_E, MT2_VAC_F...
FROM(
	select
	distinct
	t3.LAY_OUT,
	t1.POSICION_COD,
	t2.LARGO,
	t2.ANCHO,
	t2.LARGO * t2.ANCHO / 10000 as mt,
	IIF(t4.POSICION_COD IS NOT NULL, t2.LARGO * t2.ANCHO / 10000, 0) as mt_u
	from RL_POSICION_TIPO t1 with(nolock)
	inner join POSICION t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
	inner join TIPO_POSICION t3 with(nolock) on t1.TIPO_POSICION = t3.TIPO_POSICION_COD
	left join RL_DET_DOC_TRANS_POSICION_DIM t4  with (nolock) on t4.POSICION_COD = t1.POSICION_COD
	where
	t3.LAY_OUT = 'PISO_M2' 
	and t1.ESTADO = 1
	and t3.ESTADO = 1
) m2
group by m2.LAY_OUT;
end
-- END

-- SP EXECUTE FOR JOB EVERY 15 MINUTES
/*LA TRANSFERENCIA DE LAS POSICIONES SE HARA MEDIANTE LINKS*/
CREATE PROCEDURE [sp_grud_drop_insert_posicion]
AS
BEGIN
    DELETE FROM POSICION

    INSERT INTO POSICION
	(
    POSICION_COD,
    NAVE_COD,
    LARGO,
    ALTO,
    ANCHO,
    POS_VACIA,
    UNIDAD_VOLUMEN
    )
	SELECT DISTINCT
	t1.POSICION_COD,
	t2.NAVE_COD,
	t1.LARGO,
	t1.ALTO,
	t1.ANCHO,
	t1.POS_VACIA,
	t1.UNIDAD_VOLUMEN
	FROM [192.168..].GTWV400.dbo.POSICION T1
	INNER JOIN [192.168...].GTWV400.dbo.NAVE T2 ON T1.NAVE_ID = T2.NAVE_ID
	ORDER BY POSICION_COD;
END
-- END

-- INSERT NAVES COD
/*RECOMENDABLE HACERLO MANUALMENTE*/
CREATE PROCEDURE [SP_GRUD_DROP_INSERT_NAVE_DEPOT]
AS
BEGIN

	DELETE FROM DEPOT_NAVES

	INSERT INTO DEPOT_NAVES
	SELECT * FROM [192.168.3.243].GTWV400.dbo.NAVE
END
--END

-- SP EXECUTE FOR JOB EVERY 15 MINUTES
/*LA TRANSFERENCIA DE LAS POSICIONES Y CLIENTES SE HARA MEDIANTE LINKS*/
CREATE PROCEDURE [SP_GRUD_DROP_INSERT_RL_DET_DOC_TRANS_POSICION_DIM]
AS
BEGIN

    DELETE FROM RL_DET_DOC_TRANS_POSICION_DIM

    INSERT INTO RL_DET_DOC_TRANS_POSICION_DIM
	(
    POSICION_COD,
    CLIENTE_ID
    )
	SELECT DISTINCT 
	T2.POSICION_COD,
	T1.CLIENTE_ID
	FROM [192.168.3.243].GTWV400.dbo.RL_DET_DOC_TRANS_POSICION T1
	INNER JOIN [192.168...].GTWV400.dbo.POSICION T2 ON T1.POSICION_ACTUAL= T2.POSICION_ID
	INNER JOIN [192.168...].GTWV400.dbo.CLIENTE T3 ON T1.CLIENTE_ID = T3.CLIENTE_ID
	WHERE POSICION_ACTUAL IS NOT NULL
	ORDER BY T1.CLIENTE_ID
END
-- END

-- SP PARA INSERTAR CLIENTES
/*LA TRANSFERENCIA DE LAS CLIENTES SE HARA MEDIANTE LINKS,
RECOMENDABLE HACERLO MANUALMENTE O CREAR UN JOB QUE SE EJECUTE UNA VEZ AL DIA.*/
CREATE PROCEDURE [SP_GRUD_INSERT_CLIENTEDEPOT]
AS
BEGIN

	DELETE FROM CLIENTEDEPOT

	INSERT INTO CLIENTEDEPOT
	(
	CLIENTE_ID,
	NOMBRE,
	NRO_DOCUMENTO,
	RAZON_SOCIAL,
	OBSERVACIONES,
	ESTADO
	)
	SELECT 
	CLIENTE_ID,
	NOMBRE,
	NRO_DOCUMENTO,
	RAZON_SOCIAL,
	OBSERVACIONES,
	ID_STATUS
	FROM [192.168.3.243].GTWV400.dbo.CLIENTE
END
-- END

-- OBTENER NAVES DE DEPOT -STORE PROCEDURE
CREATE PROCEDURE [uca_sp_get_listNave_lay_out]
AS
BEGIN
	select
	NAVE_COD,
	DESCRIPCION
	FROM DEPOT_NAVES
	where NAVE_TIENE_LAYOUT = 1
	and DISP_LOCATOR != 1
	order by NAVE_COD;
END
--END

-- OBTENER POSICIONES POR NAVES
CREATE PROCEDURE [dbo].[uca_sp_get_analytics_posicion]
@p_lay_out varchar(30)
AS
BEGIN
select
	t3.ORDER_ASC,
	t3.LAY_OUT,
	t1.TIPO_POSICION,
	COUNT(t2.POSICION_COD) AS TOTAL,
	 (
		SELECT COUNT(DISTINCT tp.POSICION_COD)
        FROM POSICION tp
		INNER JOIN RL_POSICION_TIPO t4 ON tp.POSICION_COD = t4.POSICION_COD AND t4.ESTADO = 1
        WHERE t4.TIPO_POSICION= t1.TIPO_POSICION AND tp.POS_VACIA = 0
	) AS OCUPADAS,
	(
		SELECT COUNT(DISTINCT tp.POSICION_COD)
        FROM POSICION tp
		INNER JOIN RL_POSICION_TIPO t4 ON tp.POSICION_COD = t4.POSICION_COD AND t4.ESTADO = 1
        WHERE t4.TIPO_POSICION = t1.TIPO_POSICION AND tp.POS_VACIA = 1 
	) AS LIBRES,
	(
		SELECT COUNT(DISTINCT tp.POSICION_COD)
		FROM POSICION tp
		INNER JOIN RL_POSICION_TIPO t4 ON tp.POSICION_COD = t4.POSICION_COD AND t4.ESTADO = 1
		WHERE t4.TIPO_POSICION = t1.TIPO_POSICION and tp.POS_VACIA = 1 AND tp.NAVE_COD = 'A'
	) AS VAC_A,
    -- AGREGAR LAS DEMAS POSICICIONES , VAC_B, VAC_C, VAC_C...
	from RL_POSICION_TIPO t1 with(nolock)
	inner join POSICION t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
	inner join TIPO_POSICION t3 with(nolock) on t1.TIPO_POSICION = t3.TIPO_POSICION_COD
	where t3.LAY_OUT = @p_lay_out 
	and t1.ESTADO = 1 and t3.ESTADO = 1
	group by t1.TIPO_POSICION,t3.ORDER_ASC,t3.LAY_OUT
	order by  ORDER_ASC ASC
END;
--END

-- CREATE STORE PROCEDURE POSITIONS TYPE OCUP
/* EN ESTA SP DEBEN IR LOS TIPO QUE TIENES POSICIONES OCUPADAS*/
CREATE PROCEDURE [dbo].[uca_sp_get_analytics_position_type_ocup]
as
begin
	select
	(
		select
		COUNT(t1.POSICION_COD)
		from POSICION t1 with(nolock)
		inner join RL_POSICION_TIPO t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
		where t1.POS_VACIA = 0 and t2.TIPO_POSICION ='ESTANTERIA' and t2.ESTADO = 1
	) as t_stanteria_ucup,
	(
		select
		COUNT(t1.POSICION_COD)
		from POSICION t1 with(nolock)
		inner join RL_POSICION_TIPO t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
		where t1.POS_VACIA = 0 and t2.TIPO_POSICION ='SHORT' and t2.ESTADO = 1
	) as t_short_ucup,
	(
		select
		COUNT(t1.POSICION_COD)
		from POSICION t1 with(nolock)
		inner join RL_POSICION_TIPO t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
		where t1.POS_VACIA = 0 and t2.TIPO_POSICION ='JAULA' and t2.ESTADO = 1
	) as t_jaula_ucup,
	(
		select
		COUNT(t1.POSICION_COD)
		from POSICION t1 with(nolock)
		inner join RL_POSICION_TIPO t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
		where t1.POS_VACIA = 0 and t2.TIPO_POSICION ='STANDARD' and t2.ESTADO = 1
	) as t_stand_ucup,
	(
		select
		COUNT(t1.POSICION_COD)
		from POSICION t1 with(nolock)
		inner join RL_POSICION_TIPO t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
		where t1.POS_VACIA = 0 and t2.TIPO_POSICION ='HIGH' and t2.ESTADO = 1
	) as t_high_ucup,
	(
		select
		COUNT(t1.POSICION_COD)
		from POSICION t1 with(nolock)
		inner join RL_POSICION_TIPO t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
		where t1.POS_VACIA = 0 and t2.TIPO_POSICION ='STANDARD BPA' and t2.ESTADO = 1
	) as t_standbpa_ucup,
	(
		select
		COUNT(t1.POSICION_COD)
		from POSICION t1 with(nolock)
		inner join RL_POSICION_TIPO t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
		where t1.POS_VACIA = 0 and t2.TIPO_POSICION ='SHORT DIGEMID' and t2.ESTADO = 1
	)as t_shortbdigemid_ucup,
	(
		select
		COUNT(t1.POSICION_COD)
		from POSICION t1 with(nolock)
		inner join RL_POSICION_TIPO t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
		where t1.POS_VACIA = 0 and t2.TIPO_POSICION ='SHORT DIGESA' and t2.ESTADO = 1
	) as t_shortdigesa_ucup,
	(
		select
		COUNT(t1.POSICION_COD)
		from POSICION t1 with(nolock)
		inner join RL_POSICION_TIPO t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
		where t1.POS_VACIA = 0 and t2.TIPO_POSICION ='SHORT CONTROLADOS' and t2.ESTADO = 1

	) as t_shortdcontrolados_ucup,
	(
		select
		COUNT(t1.POSICION_COD)
		from POSICION t1 with(nolock)
		inner join RL_POSICION_TIPO t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
		where t1.POS_VACIA = 0 and t2.TIPO_POSICION ='LABORATORIO' and t2.ESTADO = 1

	) as t_laboratorio_ucup,
	(
		select
		COUNT(t1.POSICION_COD)
		from POSICION t1 with(nolock)
		inner join RL_POSICION_TIPO t2 with(nolock) on t1.POSICION_COD = t2.POSICION_COD
		where t1.POS_VACIA = 0 and t2.TIPO_POSICION ='GAVETAS' and t2.ESTADO = 1
	) as t_gavetas_ucup;
end
-- END

-- CREATE STORE PROCEDURE POSITIONS OCUP FOR CLIENTS
CREATE PROCEDURE [dbo].[uca_sp_get_analytics_position_customers]
as
begin
	select
	t1.CLIENTE_ID,
	t1.RAZON_SOCIAL,
	t1.OBSERVACIONES,
	count(t2.POSICION_COD) total_posi,
	(
		select
		COUNT(rlpos.POSICION_COD)
		from RL_DET_DOC_TRANS_POSICION_DIM rlpos
		inner join RL_POSICION_TIPO tp on rlpos.POSICION_COD = tp.POSICION_COD
		where rlpos.CLIENTE_ID = t1.CLIENTE_ID and tp.TIPO_POSICION = 'ESTANTERIA'
	)as estan_ocup,
	(
		select
		COUNT(rlpos.POSICION_COD)
		from RL_DET_DOC_TRANS_POSICION_DIM rlpos
		inner join RL_POSICION_TIPO tp on rlpos.POSICION_COD = tp.POSICION_COD
		where rlpos.CLIENTE_ID = t1.CLIENTE_ID and tp.TIPO_POSICION = 'SHORT'
	)as short_ocup,
	(
		select
		COUNT(rlpos.POSICION_COD)
		from RL_DET_DOC_TRANS_POSICION_DIM rlpos
		inner join RL_POSICION_TIPO tp on rlpos.POSICION_COD = tp.POSICION_COD
		where rlpos.CLIENTE_ID = t1.CLIENTE_ID and tp.TIPO_POSICION = 'JAULA'
	)as jaul_ocup,
	(
		select
		COUNT(rlpos.POSICION_COD)
		from RL_DET_DOC_TRANS_POSICION_DIM rlpos
		inner join RL_POSICION_TIPO tp on rlpos.POSICION_COD = tp.POSICION_COD
		where rlpos.CLIENTE_ID = t1.CLIENTE_ID and tp.TIPO_POSICION = 'STANDARD'
	)as stand_ocup,
	(
		select
		COUNT(rlpos.POSICION_COD)
		from RL_DET_DOC_TRANS_POSICION_DIM rlpos
		inner join RL_POSICION_TIPO tp on rlpos.POSICION_COD = tp.POSICION_COD
		where rlpos.CLIENTE_ID = t1.CLIENTE_ID and tp.TIPO_POSICION = 'HIGH'
	)as high_ocup,
	(
		select
		COUNT(rlpos.POSICION_COD)
		from RL_DET_DOC_TRANS_POSICION_DIM rlpos
		inner join RL_POSICION_TIPO tp on rlpos.POSICION_COD = tp.POSICION_COD
		where rlpos.CLIENTE_ID = t1.CLIENTE_ID and tp.TIPO_POSICION = 'STANDARD BPA'
	)as standbpa_ocup,
	(
		select
		COUNT(rlpos.POSICION_COD)
		from RL_DET_DOC_TRANS_POSICION_DIM rlpos
		inner join RL_POSICION_TIPO tp on rlpos.POSICION_COD = tp.POSICION_COD
		where rlpos.CLIENTE_ID = t1.CLIENTE_ID and tp.TIPO_POSICION = 'SHORT DIGEMID'
	)as shortdigemid_ocup,
	(
		select
		COUNT(rlpos.POSICION_COD)
		from RL_DET_DOC_TRANS_POSICION_DIM rlpos
		inner join RL_POSICION_TIPO tp on rlpos.POSICION_COD = tp.POSICION_COD
		where rlpos.CLIENTE_ID = t1.CLIENTE_ID and tp.TIPO_POSICION = 'SHORT DIGESA'
	)as shortdigesa_ocup,
	(
		select
		COUNT(rlpos.POSICION_COD)
		from RL_DET_DOC_TRANS_POSICION_DIM rlpos
		inner join RL_POSICION_TIPO tp on rlpos.POSICION_COD = tp.POSICION_COD
		where rlpos.CLIENTE_ID = t1.CLIENTE_ID and tp.TIPO_POSICION = 'SHORT CONTROLADOS'
	)as shortcontrolados_ocup,
	(
		select
		COUNT(rlpos.POSICION_COD)
		from RL_DET_DOC_TRANS_POSICION_DIM rlpos
		inner join RL_POSICION_TIPO tp on rlpos.POSICION_COD = tp.POSICION_COD
		where rlpos.CLIENTE_ID = t1.CLIENTE_ID and tp.TIPO_POSICION = 'LABORATORIO'
	)as laboratorio_ocup,
	(
		select
		COUNT(rlpos.POSICION_COD)
		from RL_DET_DOC_TRANS_POSICION_DIM rlpos
		inner join RL_POSICION_TIPO tp on rlpos.POSICION_COD = tp.POSICION_COD
		where rlpos.CLIENTE_ID = t1.CLIENTE_ID and tp.TIPO_POSICION = 'GAVETAS'
	)as gavetas_ocup,
	(
		select isnull(convert(numeric(18,2),SUM(mt)),0)
		from View_mts2 where CLIENTE_ID = t1.CLIENTE_ID
	)as piso_ocup,
	(
		select distinct COUNT(POSICION_COD)
		from View_mts2 where CLIENTE_ID =  t1.CLIENTE_ID
	)as piso_ocup_pos

	from CLIENTEDEPOT t1
	left join RL_DET_DOC_TRANS_POSICION_DIM t2 on t1.CLIENTE_ID = t2.CLIENTE_ID
	where t1.ESTADO = 1
	group by t1.CLIENTE_ID,
	t1.RAZON_SOCIAL,
	t1.OBSERVACIONES
	order by RAZON_SOCIAL;
end
--END